<behaviourtemplates>

	<is name="sensorData">
	{	
		"CONSTANTS" : {
			"FLOAT_SENSITIVITY" : 4 
		},
		"THRESHOLDS" : {
			"HAND_DETECT" : 30,
			"PERSON_PRESENT" : 175,
			"SPEED" : 10 
		},
		"raw": {
			"Hand" : 100,
			"Pillar_1" : 100,
			"Pillar_2" : 100
		},
		"processed" : {
			"isHandIn" : false,
			"wasPresent" : false,
			"wasApproaching" : false,
			"wasRetreating" : false,
			"personDetector" : "NONE",
			"floatingAverageMinDist" : 175
		}
	}
	</is>
	
	<javascript><![CDATA[
      function isHandPresent() {
      	return is.sensorData.raw.Hand < is.sensorData.THRESHOLDS.HAND_DETECT;
      }
      
      function isUserPresent() {
      	var isPresent = is.sensorData.processed.floatingAverageMinDist < is.sensorData.THRESHOLDS.PERSON_PRESENT;
      	if(isPresent && is.sensorData.processed.wasPresent){
      		return true;
      	} else {
      		is.sensorData.processed.wasPresent = isPresent;
      		return false;
      	}
      }
      
      function updateFloatingAverageMinDist(currVal, newVal){
      	return (currVal + newVal * is.sensorData.CONSTANTS.FLOAT_SENSITIVITY) / (is.sensorData.CONSTANTS.FLOAT_SENSITIVITY + 1);
      }
      
      function isUserApproaching() {
      	var isApproaching = isUserPresent() && Math.min(is.sensorData.raw.Pillar_1, is.sensorData.raw.Pillar_2) - is.sensorData.processed.floatingAverageMinDist < (-1 * (is.sensorData.THRESHOLDS.SPEED / is.sensorData.CONSTANTS.FLOAT_SENSITIVITY));
      	if (isApproaching && is.sensorData.processed.wasApproaching){
      		return true;
      	} else {
      		is.sensorData.processed.wasApproaching = isApproaching;
      		return false;
      	}	
      	
      }
      
      function isUserRetreating() {
		var isRetreating = isUserPresent() && Math.min(is.sensorData.raw.Pillar_1, is.sensorData.raw.Pillar_2) - is.sensorData.processed.floatingAverageMinDist > ((is.sensorData.THRESHOLDS.SPEED / is.sensorData.CONSTANTS.FLOAT_SENSITIVITY));
      	if (isRetreating && is.sensorData.processed.wasRetreating){
      		return true;
      	} else {
      		is.sensorData.processed.wasRetreating = isRetreating;
      		return false;
      	}	
      }
      
      function detectPersonState(){
      	if(!isUserPresent()){
      		return "NONE";
      	} else if(isUserApproaching()){
      		return "APPROACH";
      	} else if(isUserRetreating()){
      		return "RETREAT";
      	} else {
      		if(is.sensorData.processed.personDetector === "NONE"){
      			return "PRESENT";
      		} else {
      			return is.sensorData.processed.personDetector;
      		}
      	}
      }
      ]]></javascript>
      
	<template id="Retrieve_Data" name="Retrieve_Data">
		<preconditions mode="and">
			<method name="isConnected">
				<object persistent="snoozle.sensors" class="flipper.FlipperMiddleware"></object>
				<arguments></arguments>
			</method>
			<method name="hasMessage">
				<object persistent="snoozle.sensors" class="flipper.FlipperMiddleware"></object>
				<arguments></arguments>
			</method>
		</preconditions>
		<effects>
			<method is="is.sensorData.raw" is_type="JSONString" name="getMessage">
				<object persistent="snoozle.sensors" class="flipper.FlipperMiddleware"></object>
				<arguments></arguments>
			</method>
			<assign is="is.sensorData.processed.floatingAverageMinDist"><![CDATA[
			updateFloatingAverageMinDist(is.sensorData.processed.floatingAverageMinDist, Math.min(is.sensorData.raw.Pillar_1, is.sensorData.raw.Pillar_2))
			]]></assign>
			
			<assign is="is.sensorData.processed.personDetector"><![CDATA[
			detectPersonState()
			]]></assign>
		</effects>
		
	</template>


	<template id="Detect_Hand" name="Detect_Hand">
		<preconditions mode="and">
			<condition>is.sensorData.processed.isHandIn === false</condition>
			<condition><![CDATA[
	      		isHandPresent()
	      	]]></condition>
		</preconditions>
		<effects>
      		<assign is="is.sensorData.processed.isHandIn">true</assign> 
		</effects>
	</template>
	
	<template id="Detect_No_Hand" name="Detect_No_Hand">
		<preconditions mode="and">
			<condition>is.sensorData.processed.isHandIn === true</condition>
			<condition><![CDATA[
	      		!isHandPresent()
	      	]]></condition>
		</preconditions>
		<effects>
      		<assign is="is.sensorData.processed.isHandIn">false</assign> 
		</effects>
	</template>
	
	
	

</behaviourtemplates>